package utils

import (
	"strings"
)

type Screen int

const (
	MenuWidth  = 50
	MenuHeight = 12

	// leaderboard files
	MarathonScoreFile = "internal/leaderboard/data/tetris_marathon_scores.csv"
	SprintScoreFile   = "internal/leaderboard/data/tetris_sprint_scores.csv"
	UltraScoreFile    = "internal/leaderboard/data/tetris_ultra_scores.csv"
	SnakeScoreFile    = "internal/leaderboard/data/snake_scores.csv"

	ExitScreenTickSpeed  = 2   // seconds
	LoadingTickSpeed     = 2   // milliseconds
	LoadingDotPulseSpeed = 500 // milliseconds

	// different types of screens for the arcade menus
	ScreenLoading = Screen(iota)
	ScreenMainMenu
	ScreenGameMenu
	ScreenScoreMenu
	ScreenLeaderboard

	// Colors for styling
	GopherColor       = "#00ADD8"
	DarkerGopherColor = "#0082A8"

	// Art for arcade machine
	GopherMascot = `         
	         ⡀⡠⢠⠰⢐⠔⡘⡐⡑⢌⢒⠰⡐⠤⢠⢀
	⡀⡄⢄⢄⡠⠢⡡⡑⠌⠔⢌⠢⠨⢂⢊⠄⢅⠢⠑⠐⠑⠔⢡⢑⠢⢔⠔⡂⢆⢄
⠀⢀⠎⡂⣮⡰⡨⢂⠕⠀⠀⠀⠀⠀⠈⠅⢕⠠⡡⠃⠀⠀⠀⠀⠀⠀⠂⡅⢅⠳⣮⢐⠌⡢
⠀⠰⡁⡪⡻⠡⡂⠅⣰⡶⢦⠀⠀⠀⠀⠈⡢⠡⡂⢴⡿⡣⠀⠀⠀⠀⠀⢪⢐⠡⢱⢐⢡⠊
⠀⠀⠑⠦⡃⠕⡨⢂⠈⠛⠂⠀⠀⠀⠀⠠⡊⢔⠡⡀⠋⠁⠀⠀⠀⠀⡠⢃⠔⡨⠂⡇⠁
⠀⠀⠀⡘⠄⢕⠠⡡⠣⡠⡀⣀⢀⢄⠢⢣⢾⣷⣿⡎⡢⠄⠤⡐⢄⢃⠪⢐⠌⡐⠅⡪
⠀⠀⠀⡪⠨⢂⠅⡢⠡⢂⢊⠔⡐⠔⢅⠁⠡⡁⠅⡐⢈⢪⢈⠢⠡⡂⠅⢅⢊⠔⠡⢊⡂
⠀⠀⠀⡪⠨⢂⢊⠄⢅⠕⡐⠌⠔⡡⠡⡃⠁⢘⠀⠸⡐⠡⡂⠅⠕⡐⢅⢑⢐⠌⡊⠔⡅
⠀⠀⠀⢜⢈⠢⢂⠅⢅⢂⠪⠨⡨⢐⠡⢊⠤⠪⡠⡘⠄⢕⠐⠅⢕⠨⡐⠔⡁⡢⠊⠔⡅
⠀⠀⠀⢨⠂⢅⠅⡊⢔⠐⢅⢑⢐⠡⢊⠔⡨⢂⢂⢊⠌⡂⢅⠕⡁⡢⠊⠔⡁⡢⢑⠡⡂
⠀⠀⠀⠰⡡⠡⢊⢐⠡⢊⠔⡁⡢⠡⡡⢂⠢⡑⠄⠕⡨⢐⠡⢂⢊⠄⠕⡡⢊⢐⠔⠡⠅
⠀⠀⢀⢈⠆⢅⢑⢐⠡⠡⡂⡊⢄⠕⡠⢑⠨⡐⡡⢑⢐⠡⢊⠔⡐⡡⢑⠄⠕⡐⠌⢌⢅⡀⡀
⠠⡊⢀⢂⠇⢅⠢⠑⠌⢌⠢⠨⡂⠌⢔⢁⢊⠔⡐⡡⢂⠕⡐⡡⢂⢊⠔⡨⠨⢂⠅⢅⢅⠄⢌⢂
⠈⠢⠂⢱⠑⢄⠅⢕⠡⡑⡨⢂⢊⠌⡂⡢⠡⢂⠢⡂⢅⠢⢂⠢⠡⡂⡊⢄⠅⢅⠪⢐⢱⠑⠐⠁
⠀⠀⠀⢨⠨⢂⢊⠔⡨⢐⠄⠕⡠⢑⢐⠌⢌⠢⠡⡂⢅⠪⢐⠡⡑⡐⠌⡂⠅⢅⠪⢐⢸
⠀⠀⠀⢸⠈⢔⢐⠡⢂⠅⡊⠌⠔⡁⡢⢑⢐⠡⡑⠄⠕⡈⡢⢑⢐⠌⢌⠢⠡⡑⠌⡂⡪
⠀⠀⠀⢪⢈⢂⠢⠡⡡⢊⢐⠅⠕⡨⢐⠡⢂⢑⢐⠅⠕⡐⠌⢔⢐⠌⡂⡪⠨⡐⡡⢂⢪
⠀⠀⠀⢱⠐⡡⠊⢌⠔⡰⢐⠌⢌⠔⡁⡪⢐⠡⢂⢊⠌⡂⢅⠅⡂⡊⠔⡐⡡⢂⠢⠡⡪
⠀⠀⠀⠸⡐⡐⠅⢅⠢⢂⠅⡊⠔⡨⢐⢐⠡⢊⠔⡐⡡⠨⢂⠅⡊⠔⡡⢂⢊⠄⢅⠕⡂
⠀⠀⠀⠈⡆⢌⠌⡢⠡⠡⢊⢐⠅⡊⠔⡁⡪⠐⠌⢔⠨⠨⡂⡊⠔⡡⢂⠅⡢⠡⠡⡪
⠀⠀⠀⠀⠘⡔⠨⡐⡡⢑⠡⢂⢊⠄⢕⠐⢔⠡⢃⠅⡊⠌⢔⢈⠢⢂⠅⡊⠄⢕⢑⠁
⠀⠀⠀⠀⠀⠘⢌⡂⡢⠡⢊⠔⡐⢅⠢⠡⡡⢊⢐⠌⠔⡡⠡⡂⠅⢅⠊⢔⢡⠣⠁
⠀⠀⠀⠀⠀⠠⢊⠐⠈⡂⡇⣅⢂⠪⢐⠌⡊⠔⡐⡡⠨⡨⢐⠡⡨⡨⡢⠕⢅⠂⡈⡢
     ⠘⢄⢅⠎⠈⠀⠀⠉⠘⠂⠃⠒⠕⠢⠪⠒⠘⠂⠃⠁⠁⠀⠀⠈⠂⠆⠎⠂⠀
`

	// due to weird formatting had to adjust the braille art here, so even though it looks weird here,
	// it looks *mostly* fine in the arcade machine
	GopherMascotSword = `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⣟⡀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢸⢘⡆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢼⠂⣯⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⡯⡨⡸⡄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⡯⢐⢌⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠠⡇⠪⡐⣅
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠐⡇⡢⠢⡗
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⣇⠪⢐⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⡧⡑⡐⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⡗⢅⠢⡫
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                 ⡯⡂⡊⡆
⠀⠀⠀⠀⠀⠀⠀⠀⠀                           ⡗⢅⠰⡅
⠀⠀⠀⠀⠀⠀⠀⠀⠀                ⢀⣠⣦⣢⡄⠀⠀⠀⠀⠀⠀⡯⡂⠜⡆
⠀⠀⠀⠀⠀⠀⠀⠀⠀       ⢀⣀⠤⠤⠴⠔⠤⡤⣼⣉⠀⠈⠈⠛⣄⠀⠀⠀⠀⠀⣯⢨⢘⡆
⠀⠀⠀⠀⠀⠀      ⢀⢤⠲⢉⠅⡂⠌⡂⠅⠌⡂⢂⠂⠅⠫⠲⢄⠀⠘⡆⠀⠀⠀⠀⡷⡱⡂⣇
⠀⠀⠀⠀⠀⠀ ⡀⠀⢀⡴⢋⢐⠨⢀⢂⢂⠡⢐⠨⠐⡐⠠⡁⠅⠡⣎⡏⠏⢢⡏⠀⠀⠀ ⢐⡯⣺⡨⡮⠀
⠀⠀⠀⠀⠀⠀⠸⡨⠱⠋⠄⡂⠔⡈⠄⡂⡐⠨⣀⢆⢅⣂⠅⢂⠡⢁⠏⢀⠥⡚⡸⡄⠀ ⣲⠺⡻⠳⢝⢟⢤⠄
⠀⠀⠀⠀⠀⠀⢀⡽⠡⠡⢁⠂⡂⢂⠡⢐⡜⠁⠀⡤⣄⡈⠛⣔⠨⠠⢉⢊⠑⠔⠡⠸⡂ ⠉⠙⣽⢙⢳⠗⠗⠃
⠀⠀⠀⠀⠀⠀⢰⢃⠡⢁⠂⠅⢂⠡⢈⡎⠀⠀⠸⣷⣾⠇⠀⠈⢣⠁⡂⡂⠌⠌⡨⢐⢱⠄⠀ ⡷⡐⢼⡃
⠀⠀⠀⠀   ⡏⠄⢌⢐⠨⢈⢐⠨⢰⠅⠀⠀⠀⠀⠀⠀⠀⠀⢘⢐⠐⡠⠁⢅⢐⠐⡈⡇⢀⢮⠂⢵⠅
⠀⠀⠀ ⡰⡚⢅⠑⠄⡂⠌⡐⠠⠨⢐⢣⡀⠀⠀⠀⠀⠀⠀⢠⡃⡂⠅⠄⡑⠠⠂⠌⡐⢸⡁ ⣱⠡⡱⡅
⠀⠀⠀⠧⣪⡑⠌⡐⠄⠅⠂⠅⠅⡂⠌⡪⢦⣀⣀⣀⢠⠢⢃⠂⠔⠨⢐⠨⠈⢌⢐⠨⢀⢗⢯⢫⢍⣗
⠀⠀⠀⠀  ⣯⠐⠄⠅⠌⠌⢂⠡⠠⡁⢂⢂⢐⢁⠂⠅⡨⠐⡈⠌⠨⡀⡂⠅⡂⠔⡈⠄⣹⡈⠉⠁
⠀⠀⠀⠀⠀⠘⣎⠄⡑⠨⢈⢐⠨⢐⠠⠡⢐⠠⠂⠌⡂⠄⠅⡂⠡⠡⢐⠠⢁⠂⡂⡂⠅⠢⡇⠀
⠀⠀⠀⠀⠀⠀ ⠘⡮⡠⠑⡐⢐⠈⠄⢌⢐⢐⠈⠌⡐⠠⡁⡂⡂⠅⠡⠂⠌⡐⡈⠄⡂⠌⢌⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣌⢐⠄⠡⡁⠢⢐⠠⢊⢐⠨⢐⠐⠠⢂⠡⢁⠅⡁⡂⠄⠅⢂⢁⠢⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠮⣔⡠⠑⡐⢐⢐⠠⠨⢀⢊⠨⠐⡈⠄⡂⢂⠂⠅⡊⢐⠐⣸⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⡕⡈⡐⡐⢰⠁⡾⢐⠐⠨⢐⠠⢁⢂⠂⠅⡁⡂⠡⣨⡎
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⣇⠂⠔⡀⠣⡰⠃⡂⠌⠌⡐⡈⡐⡀⡊⡐⡐⠠⣑⠞⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢖⠢⡳⡈⠔⠨⢐⠠⢁⢂⠡⠡⢐⠠⠂⡂⠔⢐⠠⣱⠊
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⢦⡨⢈⠄⠌⡐⠠⠨⢐⢐⠨⠐⡐⠨⡰⠙
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠓⢦⢕⡬⠀⣅⢂⡂⣢⡱⢸⠍⠈
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠨⡆⡰⠉⠁⠉⠸⣠⠏
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⠁⠁
	`

	BuffGopher = `
	⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣀⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣀⣠⡤⡔⡒⡒⡒⡑⠕⡑⠕⡒⣶⣾⣿⠿⡿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⡐⠔⡰⡠⠞⢟⡿⠻⠿⠿⡾⣶⣿⡕⡈⡂⡊⢟⢩⡰⠬⢔⢬⣉⠻⣻⣀⠠⡠⠠⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢐⢑⠌⣢⣷⠪⠡⣱⠉⠀⠀⠀⠀⠀⠀⠘⢆⡊⠔⡨⠎⠁⠀⠀⠀⠀⠈⠑⡆⠕⢇⣢⣑⠌⡢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡐⠨⣸⠃⠜⡨⡆⠀⠀⠀⠀⠀⡴⣾⣦⠘⡆⡑⡎⠀⠀⠀⠀⠀⣠⣶⣤⠘⡥⢑⢻⡿⡑⡐⡅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢘⡎⠌⢌⠔⡣⡀⠀⠀⠀⠀⠘⠞⠗⣨⠣⠨⡣⠀⠀⠀⠀⠀⠹⠾⠟⢠⠇⢅⠢⢇⠆⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⢐⠡⠡⢂⢊⠲⢤⣀⣀⢀⣀⡠⣲⣵⣾⣾⣜⠥⣄⠀⠀⠀⠀⢀⡠⢇⢑⢐⠌⢺⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡍⡂⠅⢅⠕⡠⢑⢐⠄⠕⡉⡢⡣⠋⠛⠛⠛⠋⠓⡬⢙⢘⠒⠍⠍⢌⢂⠢⡁⡊⡘⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠌⢌⢂⠢⢂⠅⡂⡊⠌⠔⡸⢄⣀⠄⢔⠤⠠⣠⢚⢐⠡⢊⠌⡊⠔⢄⢑⠐⢌⢐⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠅⢅⠢⠑⢄⢑⢐⠌⢌⠌⠔⡁⡺⠀⢐⠄⠠⡇⠢⡁⡪⢐⠨⡐⠡⡂⡢⠡⠡⡂⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢐⢂⢋⠅⠣⡑⢌⢌⢂⠪⡐⠌⠔⡨⠨⡐⢌⠓⠍⡓⠍⢌⢂⠢⢂⠅⡂⡪⠨⡐⡐⡡⡑⠄⢍⠒⢌⠍⢍⠩⠡⠑⠒⠤⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠠⠔⠔⠪⠩⠩⢑⠑⠕⡂⢆⠪⢂⠅⡢⠂⢅⢑⢐⠡⠢⡡⢑⠨⠨⡨⢐⠡⠨⡠⠡⡑⠄⢅⠅⡢⠑⠄⠕⡐⡐⡑⢌⠢⠡⡨⠨⢂⠅⢅⠊⠔⡨⠨⢊⠔⡠⢁⠓⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠣⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠊⠌⢈⠨⠠⡑⠨⡠⠡⡑⡨⢐⠌⠢⠨⡐⠡⠡⡂⠅⡊⢌⠂⢅⢊⠌⠔⡐⡡⢑⢐⠡⢂⠅⢅⠢⢂⠅⠕⡡⢂⢊⠔⠡⢊⠌⡐⢅⢂⠪⠠⡡⢑⠐⢅⢂⢊⠔⡐⠡⡊⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⡆⡉⠂⠆⠤⠠⣀⠀⠀⡔⠅⠁⡀⠢⠡⢃⠪⡑⠌⡊⠔⡁⡢⠊⢌⠌⡂⠕⡁⡢⢑⠨⢠⠡⠡⢂⢊⠌⠔⡐⠡⢂⢑⢐⠡⢂⠕⡠⠡⡑⡐⠔⡐⠌⡊⠔⡨⢐⠔⡐⡡⠑⢄⢑⠌⡂⠢⢂⢪⢐⠡⢂⢚⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢢⠈⡘⠑⠜⢄⡁⡈⡆⡜⡐⠀⡁⠄⡃⠅⢅⠕⡠⢑⢈⢂⢊⠄⢅⠅⡂⡪⠐⢌⢐⠔⠡⡁⡊⢌⢂⢂⢊⠌⠔⡡⣧⢦⣅⢊⠔⣰⡈⡂⣢⡊⢌⢶⢵⠪⡲⣌⢂⠢⣂⠆⢅⠅⡢⢈⠢⠡⡑⠨⡣⢌⢂⡂⠇⡢⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠤⡱⢔⡌⠔⠔⢵⠤⡓⢲⢰⢠⡀⡊⡐⡡⢑⠨⡐⠡⢂⠅⡂⠪⡐⠌⠔⡐⡡⠡⢂⢊⠌⠔⣨⣐⢐⠡⢢⣎⡂⡢⠱⡥⢹⣦⢊⣾⠕⣬⡐⡇⡊⡢⢊⢕⠌⢲⠐⢽⠨⡝⡳⠱⣰⡁⡪⠨⡐⠡⢪⡑⡑⡌⡪⡰⢐⠄⡑⢄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠎⢠⠡⠔⣜⢠⢅⠓⡅⡅⢂⠢⠠⢁⠊⠕⠪⢔⡐⡡⠨⠨⡂⠌⢌⢂⠢⠡⡑⡐⡐⠅⢅⢂⢊⠼⣟⠍⡂⠅⢽⣷⡘⢜⢦⡙⢟⠷⣔⠸⢷⣄⣳⠩⢔⡸⡐⡨⢌⢂⣇⢽⡸⡌⢎⢊⠢⡂⡢⠡⡨⠨⢂⡇⢘⠌⡆⡪⡂⡊⢄⠀⢆⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢠⠡⡰⢑⡡⠢⢺⢂⠢⡈⡣⡂⡣⢱⢼⢐⢔⠨⡈⠄⡩⠢⡕⠡⡪⢌⢢⡂⠁⢁⠀⠂⠊⠌⡂⡂⡢⢊⠳⣅⢌⠺⣦⡙⠷⣦⣑⣯⢘⢬⠨⠓⡅⡊⢍⢂⠠⠈⠔⡠⢑⢐⢙⢐⠔⠡⢊⠢⡡⡑⠄⠕⡠⠡⡡⡃⠀⠕⢬⢢⢒⠨⡐⡐⢨⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠐⠤⣄⢔⢐⡘⡕⡩⠔⠁⠀⠀⡼⠐⠐⢀⠂⡐⠈⠌⢂⠃⢇⢗⡢⡣⡐⡐⡈⢣⡽⡘⢔⠩⡪⡀⠄⠈⠠⠈⢐⠰⢐⠰⢐⠌⡒⢕⠚⠝⢮⢐⢉⢂⠢⠊⢌⠌⢔⠨⢂⠕⢔⠀⠂⠨⢂⠢⡁⡂⡊⢌⢂⠅⡲⡸⡸⡘⠄⢕⡜⠌⠄⠁⢕⠩⣣⡑⡐⠄⢐⠅⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠈⠀⠀⠀⠀⠀⢀⣀⢏⠉⡙⡐⡒⢆⠧⡢⡰⣈⠄⠂⠢⢡⠱⠡⢐⢜⢂⠪⡢⢑⠌⡪⢣⢪⡀⠐⠀⠌⢂⢑⢐⠌⢔⡐⡅⡕⡐⠅⡂⢅⠊⢌⢂⢊⠔⢌⢪⠸⡨⠪⡐⡠⣐⢈⠐⢌⢐⢁⠢⠨⡐⣐⣔⠬⢎⠇⡧⠡⠡⠈⠰⡑⣜⠆⡊⠔⡀⠍⠢⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⢁⢂⠂⠅⠀⠢⠨⢂⢕⢑⠔⡐⡙⢬⡐⢈⠩⢈⡜⢀⠢⢱⢘⠔⢅⢢⠡⠢⡙⡪⢔⢄⠠⠀⠂⠨⠐⠨⠨⠨⠨⠨⠂⠅⠪⠐⠢⣑⡸⡸⡒⡕⠜⢌⠪⠨⡊⡪⡩⠍⡇⡫⡋⡫⡙⡌⡢⠣⡑⣕⠣⠡⡑⠈⡌⡪⡐⢕⢈⠢⠨⢂⠅⡘⡢⡀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠕⢔⢐⠡⠐⠈⢨⠨⢂⠪⡢⡑⡐⢌⢐⢘⣆⠆⠃⠈⠠⠈⠢⡡⢣⢑⢅⠪⢘⠦⣊⠌⡪⢩⠣⡓⠦⡢⢆⢆⢆⠦⡒⢖⠎⡖⡹⡙⢌⠜⡐⠅⢌⠌⠢⠨⡂⠢⡂⢎⢊⠆⡕⢌⠆⡕⢌⢪⢘⠌⠀⠙⠬⡐⢌⠢⡱⡘⢌⢆⢍⠪⠐⢌⠪⡐⢥⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠌⠨⡐⠄⠕⡀⠨⡒⡨⢨⢊⢆⢪⢐⢢⠱⢱⠀⠀⠀⠀⠀⠁⠐⡈⠐⡑⢌⠪⢐⠨⡐⡙⣘⠢⡣⡊⡑⡘⠔⡑⢌⠪⡘⠔⡑⠌⠢⠨⢂⠅⠌⠌⣂⢬⠪⠪⡊⣖⢈⢢⢑⢕⠸⡐⢕⠸⡨⠢⠃⠀⠀⠀⠀⡇⠅⡊⠔⢜⢔⠱⡐⡎⠨⢂⢕⢑⠌⡆⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢐⠈⢌⠢⠡⡑⢄⠑⡅⢌⢆⢕⢐⢡⢑⢅⠣⠅⡇⠀⠀⠀⠀⠀⠀⠀⠁⠄⡄⡈⠂⠅⢂⢊⠜⡢⡪⡍⠪⡈⡢⢊⢢⠡⡂⢕⢠⡁⠡⡁⣂⠤⠕⢕⠑⠄⡅⠕⡐⠌⡪⡲⡱⡐⡕⡅⠇⠇⠁⠁⠀⠀⠀⠀⠀⡇⠌⢐⠡⡑⢔⡑⡅⡇⠅⢅⠆⡕⣡⠁⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢎⠐⢅⢕⠨⡠⠡⢙⢔⢡⢂⠪⡐⡐⡌⡪⢡⡃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠈⠐⠐⠐⠔⠂⢇⠑⡐⡐⢅⠣⡑⡅⢕⠄⢍⠑⢅⠢⢑⠡⠡⣊⢎⠪⠐⢌⠢⡱⢨⠢⡱⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢄⡂⠡⢂⠕⢌⠮⢂⠅⡕⡑⢔⠊⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠣⡐⡐⢅⠪⡨⠀⡧⡑⠄⢅⢕⢐⠕⣨⠒⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢄⠐⡨⢐⠡⡱⡘⢔⢅⠢⡑⡐⡡⢂⠅⠅⣗⠠⠠⡑⡐⡱⣘⠔⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢪⢐⠸⡘⡌⡢⡃⠎⢌⠎⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢈⠔⡑⢌⠂⢇⠊⢌⠢⡊⡔⠕⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡔⠠⡑⠨⢢⢑⢕⠰⡡⢂⢂⠢⡁⠪⡸⠂⢌⢂⠢⡊⠆⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⢆⢑⢱⠨⡢⢊⢌⠃⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠒⡌⡐⡡⠡⠊⢔⠱⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠻⣿⣷⣮⣮⣐⣅⢆⢣⢪⠮⡚⢜⠦⡕⣅⣥⣅⣦⣧⣮⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⡐⡐⠌⡊⡂⠅⢜⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢇⠢⠨⡨⠨⢂⠕⡸⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠪⠠⢈⠙⠛⠿⢿⢿⣿⣿⣗⡕⢌⢢⢡⣽⣿⡿⡿⠿⢻⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⡢⢊⠆⡂⡊⠌⠔⡨⠨⢂⢇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢑⠨⠨⡐⠡⡂⡊⣄⠇⠕⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⡂⠅⡂⠌⠌⡐⡐⢐⠠⠡⠡⢉⢊⢊⢊⠐⠄⡂⠄⣠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣠⢇⡂⡊⠔⡨⠨⡨⢐⠡⠂⡇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡎⡢⠡⡑⡨⠨⠠⡃⡫⡌⢬⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠮⡂⠔⡐⠠⠡⠨⢀⢂⠢⢌⠂⠅⡂⡂⢂⠔⠨⢐⠠⡑⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⠌⠔⡈⡂⡢⠑⢄⢥⠪⠊⠊⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢣⣂⢅⣂⠢⠡⡑⡐⡐⡭⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⣀⣀⠔⠅⢅⢍⠳⡰⠥⡥⣡⠕⠈⠀⠈⢪⣐⣐⣄⡅⡦⢕⢲⠑⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠘⠘⠘⠘⠘⠊⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠁⠉⠉⠐⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠉⢅⠕⡰⡐⢅⠕⢔⡑⡅⡣⡣⠁⠀⠀⠀⠀⢐⡅⡂⢆⠪⡘⢔⠱⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢪⡀⡁⠊⡂⢊⢢⠱⠑⠨⠒⠉⠀⠀⠀⠀⠀⠀⠀⠑⠘⠐⠕⡌⡊⡪⡂⢎⢍⢓⢢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠘⠘⠐⠑⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠂⢎⠨⠢⠑⡑⢀⠱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠑⠐⠁⠁⠀⠀⠀
	`
)

// helper function to ensure the art for the gopher is always aligned properly
func NormalizeWidth(ascii string) string {
	lines := strings.Split(ascii, "\n")
	max := 0

	for _, line := range lines {
		if len([]rune(line)) > max {
			max = len([]rune(line))
		}
	}

	for i, line := range lines {
		pad := max - len([]rune(line))
		if pad > 0 {
			lines[i] = line + strings.Repeat(" ", pad)
		}
	}

	return strings.Join(lines, "\n")
}
